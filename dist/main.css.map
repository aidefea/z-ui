{"version":3,"file":"main.css","mappings":"AAyFA,+BAWE,kBAAmB,CAHnB,+BAAoC,CADpC,iBAAkB,CAElB,UAAY,CACZ,YAAa,CAEb,6BAA8B,CAT9B,QAAS,CAGT,YAAa,CALb,cAAe,CACf,QAAS,CAET,0BAA2B,CAC3B,YAQF,CAEA,uCACE,iBACF,CAEA,qCACE,eAAgB,CAChB,WAAY,CACZ,UAAY,CACZ,cAAe,CAEf,WAAY,CACZ,iBAAkB,CAFlB,UAGF,CAEA,uFAME,qBAAuB,CAJvB,UAAW,CAGX,UAAW,CAGX,MAAO,CALP,iBAAkB,CAIlB,OAAQ,CAER,0BAA2B,CAL3B,UAMF,CAEA,4CACE,wCACF,CAEA,2CACE,yCACF,CAEA,oCACE,mCACF,CAEA,uCACE,mCACF,CAEA,uCACE,mCACF,CAEA,qCACE,mCACF,CCzDA,kBAGE,kBAAmB,CAInB,eAAgB,CAChB,wBAAyB,CAUzB,iBAAkB,CAPlB,qBAAsB,CAFtB,aAAc,CAHd,cAAe,CALf,mBAAoB,CAgBpB,cAAe,CAFf,eAAgB,CAbhB,sBAAuB,CAEvB,aAAc,CASd,QAAS,CADT,YAAa,CAIb,iBAAkB,CAGlB,iBAAkB,CATlB,iBAAkB,CAIlB,cAAgB,CAThB,kBAeF,CAEA,wBAGE,wBAAyB,CADzB,oBAAqB,CADrB,aAGF,CAEA,yBAEE,oBAAqB,CADrB,aAEF,CAGA,2BAEE,wBAAyB,CACzB,oBAAqB,CAFrB,UAGF,CAEA,iCACE,kBAAmB,CACnB,oBACF,CAEA,2BAEE,wBAAyB,CACzB,oBAAqB,CAFrB,UAGF,CAEA,2BAEE,wBAAyB,CACzB,oBAAqB,CAFrB,UAGF,CAEA,0BAEE,wBAAyB,CACzB,oBAAqB,CAFrB,UAGF,CAOA,0EACE,eACF,CAEA,2CAEE,kBAAmB,CACnB,oBAAqB,CAFrB,aAGF,CAGA,qCACE,kBAAmB,CACnB,UACF,CAGA,uBACE,4CAAsC,CAMtC,qBAA6B,CAC7B,iBAAkB,CADlB,4BAA6B,CAJ7B,oBAAqB,CAErB,WAAY,CAHZ,gBAAiB,CAEjB,UAKF,CAEA,2BACE,GACE,sBACF,CACA,GACE,uBACF,CACF,CAGA,0BAEE,cAAe,CADf,iBAEF,CAEA,yBAEE,cAAe,CADf,gBAEF,CAEA,wBAEE,cAAe,CADf,gBAEF,CAGA,kCACE,kBACF,CAGA,mCACE,iBAAkB,CAClB,YACF,CC5IA,gBASE,kBAAmB,CAHnB,yBAA8B,CAD9B,QAAS,CAET,YAAa,CACb,sBAAuB,CALvB,MAAO,CAFP,cAAe,CAGf,OAAQ,CAFR,KAAM,CAQN,YACF,CAEA,cAEE,eAAgB,CAEhB,iBAAkB,CAElB,qBAAsB,CADtB,aAAc,CAFd,YAAa,CAFb,iBAAkB,CAMlB,uBACF,CAEA,qBACE,iBAAkB,CAElB,SAAU,CADV,OAEF,CAEA,kBAIE,0BAA2B,CAC3B,WAAY,CAFZ,iBAAkB,CAGlB,cAAe,CAJf,WAAY,CAKZ,yBAA2B,CAN3B,UAOF,CAEA,wBACE,0BACF,CAGA,gCAIE,eAAgB,CAFhB,sBAAwB,CACxB,cAAe,CAFf,qBAIF,CAEA,mBAEE,qBAAsB,CACtB,eAAgB,CAFhB,UAGF,CAGA,qDAEE,0BACF,CClIA,eAEE,qBAAsB,CACtB,oBAAqB,CAFrB,SAGF","sources":["webpack://zYGUtils/./packages/toast/index.vue","webpack://zYGUtils/./packages/button/index.vue","webpack://zYGUtils/./packages/popup/index.vue","webpack://zYGUtils/./packages/input/index.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"visible\" class=\"toast\" :class=\"toastClass\" @click=\"handleClick\">\r\n    <span class=\"toast-message\">{{ message }}</span>\r\n    <button v-if=\"closable\" class=\"toast-close\" @click=\"closeToast\"></button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, computed, onMounted, onUnmounted } from \"vue\";\r\n\r\nexport default {\r\n  name: \"Toast\",\r\n  props: {\r\n    message: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    duration: {\r\n      type: Number,\r\n      default: 3000, // 默认3秒后消失\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: \"info\", // 默认类型为信息\r\n    },\r\n    closable: {\r\n      type: Boolean,\r\n      default: true, // 默认有关闭按钮\r\n    },\r\n    onClose: {\r\n      type: Function,\r\n      default: () => {},\r\n    },\r\n  },\r\n  setup(props) {\r\n    const visible = ref(false); // 控制 Toast 显示与否\r\n\r\n    // 计算 Toast 的样式和类型\r\n    const toastClass = computed(() => {\r\n      return {\r\n        \"toast-info\": props.type === \"info\",\r\n        \"toast-success\": props.type === \"success\",\r\n        \"toast-warning\": props.type === \"warning\",\r\n        \"toast-error\": props.type === \"error\",\r\n      };\r\n    });\r\n\r\n    // 显示 Toast\r\n    const showToast = () => {\r\n      visible.value = true;\r\n    };\r\n\r\n    // 关闭 Toast\r\n    const closeToast = () => {\r\n      visible.value = false;\r\n      props.onClose();\r\n    };\r\n\r\n    // 处理点击事件\r\n    const handleClick = () => {\r\n      if (props.closable) {\r\n        closeToast();\r\n      }\r\n    };\r\n\r\n    // 在组件挂载后显示 Toast\r\n    onMounted(() => {\r\n      showToast();\r\n      if (props.duration > 0) {\r\n        setTimeout(closeToast, props.duration);\r\n      }\r\n    });\r\n\r\n    // 在组件卸载时调用 onClose\r\n    onUnmounted(() => {\r\n      props.onClose();\r\n    });\r\n\r\n    return {\r\n      visible,\r\n      toastClass,\r\n      handleClick,\r\n      closeToast,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.toast {\r\n  position: fixed;\r\n  top: 20px;\r\n  left: 50%;\r\n  transform: translateX(-50%);\r\n  z-index: 1000;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  background-color: rgba(0, 0, 0, 0.7);\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n.toast-message {\r\n  margin-right: 10px;\r\n}\r\n\r\n.toast-close {\r\n  background: none;\r\n  border: none;\r\n  color: white;\r\n  cursor: pointer;\r\n  width: 15px;\r\n  height: 15px;\r\n  position: relative;\r\n}\r\n\r\n.toast-close::before,\r\n.toast-close::after {\r\n  content: \"\";\r\n  position: absolute;\r\n  width: 15px;\r\n  height: 2px;\r\n  background-color: white;\r\n  top: 50%;\r\n  left: 0;\r\n  transform: translateY(-50%);\r\n}\r\n\r\n.toast-close::before {\r\n  transform: translateY(-50%) rotate(45deg);\r\n}\r\n\r\n.toast-close::after {\r\n  transform: translateY(-50%) rotate(-45deg);\r\n}\r\n\r\n.toast-info {\r\n  background-color: rgba(76, 175, 80, 0.7);\r\n}\r\n\r\n.toast-success {\r\n  background-color: rgba(38, 166, 91, 0.7);\r\n}\r\n\r\n.toast-warning {\r\n  background-color: rgba(255, 193, 7, 0.7);\r\n}\r\n\r\n.toast-error {\r\n  background-color: rgba(244, 67, 54, 0.7);\r\n}\r\n</style>\r\n","<template>\r\n  <button\r\n    :class=\"buttonClasses\"\r\n    v-bind=\"$attrs\"\r\n    :disabled=\"disabled || loading\"\r\n    :type=\"nativeType\"\r\n    @click=\"getss\"\r\n  >\r\n    <span class=\"button-content\">\r\n      <i v-if=\"loading\" class=\"button-loading\"></i>\r\n      <!-- <span v-if=\"$slots.default\"><slot></slot></span> -->\r\n      按钮组件\r\n    </span>\r\n  </button>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"zbutton\",\r\n  props: {\r\n    type: {\r\n      type: String,\r\n      default: \"default\",\r\n      validator: function (value) {\r\n        return [\r\n          \"default\",\r\n          \"primary\",\r\n          \"success\",\r\n          \"warning\",\r\n          \"danger\",\r\n          \"info\",\r\n          \"text\",\r\n        ].includes(value);\r\n      },\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"medium\",\r\n      validator: function (value) {\r\n        return [\"medium\", \"small\", \"mini\"].includes(value);\r\n      },\r\n    },\r\n    nativeType: {\r\n      type: String,\r\n      default: \"button\",\r\n      validator: function (value) {\r\n        return [\"button\", \"submit\", \"reset\"].includes(value);\r\n      },\r\n    },\r\n    loading: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    plain: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    round: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n    circle: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  computed: {\r\n    buttonClasses() {\r\n      return [\r\n        \"el-button\",\r\n        this.type ? \"el-button--\" + this.type : \"\",\r\n        this.size ? \"el-button--\" + this.size : \"\",\r\n        {\r\n          \"is-disabled\": this.disabled,\r\n          \"is-loading\": this.loading,\r\n          \"is-plain\": this.plain,\r\n          \"is-round\": this.round,\r\n          \"is-circle\": this.circle,\r\n        },\r\n      ];\r\n    },\r\n  },\r\n  methods: {\r\n    getss() {\r\n      console.log(\"111\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style module>\r\n.el-button {\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  line-height: 1;\r\n  white-space: nowrap;\r\n  cursor: pointer;\r\n  background: #fff;\r\n  border: 1px solid #dcdfe6;\r\n  color: #606266;\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n  outline: none;\r\n  margin: 0;\r\n  transition: 0.1s;\r\n  font-weight: 500;\r\n  padding: 12px 20px;\r\n  font-size: 14px;\r\n  border-radius: 4px;\r\n  position: relative;\r\n}\r\n\r\n.el-button:hover {\r\n  color: #409eff;\r\n  border-color: #c6e2ff;\r\n  background-color: #ecf5ff;\r\n}\r\n\r\n.el-button:active {\r\n  color: #3a8ee6;\r\n  border-color: #3a8ee6;\r\n}\r\n\r\n/* 按钮类型 */\r\n.el-button--primary {\r\n  color: #fff;\r\n  background-color: #409eff;\r\n  border-color: #409eff;\r\n}\r\n\r\n.el-button--primary:hover {\r\n  background: #66b1ff;\r\n  border-color: #66b1ff;\r\n}\r\n\r\n.el-button--success {\r\n  color: #fff;\r\n  background-color: #67c23a;\r\n  border-color: #67c23a;\r\n}\r\n\r\n.el-button--warning {\r\n  color: #fff;\r\n  background-color: #e6a23c;\r\n  border-color: #e6a23c;\r\n}\r\n\r\n.el-button--danger {\r\n  color: #fff;\r\n  background-color: #f56c6c;\r\n  border-color: #f56c6c;\r\n}\r\n\r\n/* 朴素按钮样式 */\r\n.el-button.is-plain {\r\n  background: #fff;\r\n}\r\n\r\n.el-button.is-plain:hover {\r\n  background: #fff;\r\n}\r\n\r\n.el-button--primary.is-plain {\r\n  color: #409eff;\r\n  background: #ecf5ff;\r\n  border-color: #b3d8ff;\r\n}\r\n\r\n/* 禁用状态 */\r\n.el-button.is-disabled {\r\n  cursor: not-allowed;\r\n  opacity: 0.5;\r\n}\r\n\r\n/* 加载动画 */\r\n.button-loading {\r\n  animation: rotating 1s linear infinite;\r\n  margin-right: 5px;\r\n  display: inline-block;\r\n  width: 14px;\r\n  height: 14px;\r\n  border: 2px solid #ccc;\r\n  border-top-color: transparent;\r\n  border-radius: 50%;\r\n}\r\n\r\n@keyframes rotating {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n/* 尺寸 */\r\n.el-button--medium {\r\n  padding: 10px 20px;\r\n  font-size: 14px;\r\n}\r\n\r\n.el-button--small {\r\n  padding: 9px 15px;\r\n  font-size: 12px;\r\n}\r\n\r\n.el-button--mini {\r\n  padding: 7px 15px;\r\n  font-size: 12px;\r\n}\r\n\r\n/* 圆角 */\r\n.el-button.is-round {\r\n  border-radius: 20px;\r\n}\r\n\r\n/* 圆形按钮 */\r\n.el-button.is-circle {\r\n  border-radius: 50%;\r\n  padding: 12px;\r\n}\r\n</style>\r\n","<template>\r\n  <div\r\n    v-if=\"visible\"\r\n    class=\"overlay no-context-menu\"\r\n    @click.self=\"handleOverlayClick\"\r\n  >\r\n    <div\r\n      class=\"popup\"\r\n      :class=\"{ fullscreen: isFullscreen }\"\r\n      :style=\"{ width: width + 'px', height: height + 'px' }\"\r\n    >\r\n      <!-- 弹窗头部 -->\r\n      <div class=\"popup-header\">\r\n        <!-- 全屏按钮（根据配置显示） -->\r\n        <button\r\n          v-if=\"showFullscreenButton\"\r\n          class=\"fullscreen-btn\"\r\n          @click=\"toggleFullscreen\"\r\n        >\r\n          ⛶\r\n        </button>\r\n        <!-- 关闭按钮 -->\r\n        <button aria-label=\"Close\" class=\"close-btn\" @click=\"handleClose\">\r\n          ×\r\n        </button>\r\n      </div>\r\n      <!-- 弹窗内容 -->\r\n      <div class=\"popup-body\">\r\n        <slot></slot>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"zpopup\",\r\n  props: {\r\n    visible: { type: Boolean, default: false },\r\n    width: { type: Number, default: 600 },\r\n    height: { type: Number, default: 400 },\r\n    showFullscreenButton: { type: Boolean, default: true },\r\n  },\r\n  data() {\r\n    return { isFullscreen: false };\r\n  },\r\n  methods: {\r\n    // 点击遮罩层关闭\r\n    handleOverlayClick() {\r\n      this.closePopup();\r\n    },\r\n    // 关闭按钮点击\r\n    handleClose() {\r\n      this.closePopup();\r\n    },\r\n    // 关闭弹窗逻辑\r\n    closePopup() {\r\n      this.$emit(\"update:visible\", false);\r\n      this.isFullscreen = false; // 关闭时重置全屏状态\r\n    },\r\n    // 全屏切换\r\n    toggleFullscreen() {\r\n      this.isFullscreen = !this.isFullscreen;\r\n    },\r\n    // ESC 键关闭监听\r\n    handleKeydown(e) {\r\n      if (e.key === \"Escape\" && this.visible) this.closePopup();\r\n    },\r\n  },\r\n  watch: {\r\n    // 禁止背景滚动\r\n    visible(val) {\r\n      document.body.style.overflow = val ? \"hidden\" : \"\";\r\n    },\r\n  },\r\n  mounted() {\r\n    document.addEventListener(\"keydown\", this.handleKeydown);\r\n  },\r\n  beforeDestroy() {\r\n    document.removeEventListener(\"keydown\", this.handleKeydown);\r\n  },\r\n};\r\n</script>\r\n\r\n<style module>\r\n.overlay {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1000;\r\n}\r\n\r\n.popup {\r\n  position: relative;\r\n  background: #fff;\r\n  padding: 20px;\r\n  border-radius: 8px;\r\n  overflow: auto;\r\n  box-sizing: border-box;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.popup-header {\r\n  position: absolute;\r\n  top: 5px;\r\n  right: 5px;\r\n}\r\n\r\n.close-btn {\r\n  width: 23px;\r\n  height: 23px;\r\n  border-radius: 50%;\r\n  background-color: #00000042;\r\n  border: none;\r\n  cursor: pointer;\r\n  transition: background 0.2s;\r\n}\r\n\r\n.close-btn:hover {\r\n  background-color: #00000060;\r\n}\r\n\r\n/* 全屏模式样式 */\r\n.popup.fullscreen {\r\n  width: 100vw !important;\r\n  height: 100vh !important;\r\n  max-width: none;\r\n  border-radius: 0;\r\n}\r\n\r\n.popup-body {\r\n  width: 100%;\r\n  box-sizing: border-box;\r\n  margin-top: 10px; /* 防止内容被关闭按钮遮挡 */\r\n}\r\n\r\n/* 悬停效果 */\r\n.close-btn:hover,\r\n.fullscreen-btn:hover {\r\n  background-color: #00000060;\r\n}\r\n</style>\r\n","<template>\r\n  <div :class=\"$style.redred\">\r\n    <div>我是一个帅哥</div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"zinput\",\r\n  data() {\r\n    return {};\r\n  },\r\n};\r\n</script>\r\n\r\n<style module>\r\n.redred {\r\n  color: red;\r\n  background-color: blue;\r\n  border: 1px red solid;\r\n}\r\n</style>\r\n"],"names":[],"sourceRoot":""}